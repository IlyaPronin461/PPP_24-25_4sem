2lab/
├── .env                        # Файл для переменных окружения (например, настройки базы данных, ключи)
├── Dockerfile                  # Конфигурация для сборки Docker-образа
├── alembic.ini                 # Конфигурационный файл Alembic (инструмент для миграций базы данных)
├── docker-compose.yml          # Конфигурация для запуска всех контейнеров с помощью Docker Compose
├── requirements.txt            # Список зависимостей Python для установки через pip
├── alembic/                    # Папка с миграциями для Alembic
│   ├── env.py                  # Файл настройки Alembic
│   ├── script.py.mako          # Шаблон для генерации миграционных скриптов
│   └── versions/               # Папка с миграциями в виде отдельных файлов
│       └── ...
└── app/
    ├── __init__.py
    ├── main.py                 # Главный файл, где создается экземпляр приложения FastAPI
    ├── api/
    │   ├── __init__.py
    │   └── endpoints/          # Папка с эндпоинтами (маршрутами) API
    │       ├── __init__.py     # Инициализационный файл для пакета
    │       ├── auth.py         # Эндпоинты для аутентификации (регистрация, логин)
    │       └── encode.py       # Эндпоинты для шифрования/дешифрования
    ├── core/                   # Основная логика конфигурации и безопасности
    │   ├── __init__.py
    │   ├── config.py           # Конфигурация приложения (например, настройки JWT, базы данных)
    │   ├── celery_config.py    # Конфигурация для Celery (асинхронные задачи)
    │   └── security.py         # Логика для работы с безопасностью (например, хэширование паролей)
    ├── cruds/                   # Логика работы с базой данных (создание, получение данных)
    │   ├── __init__.py
    │   └── user.py             # Логика работы с пользователями (например, создание пользователя)
    ├── db/                      # Конфигурация базы данных
    │   ├── __init__.py
    │   └── session.py          # Настройка сессий для работы с SQLAlchemy
    ├── models/                  # Модели базы данных
    │   ├── __init__.py
    │   └── user.py             # Модель для таблицы пользователей в базе данных
    ├── schemas/                 # Схемы данных для валидации и сериализации данных
    │   ├── __init__.py
    │   ├── encode.py           # Схемы для запросов и ответов на эндпоинты шифрования
    │   └── user.py             # Схемы для данных пользователей (например, при регистрации)
    ├── services/                # Сервисы для выполнения основной логики
    │   ├── __init__.py
    │   ├── celery_worker.py    # Рабочий процесс для Celery (обработка асинхронных задач)
    │   ├── huffman.py          # Логика сжатия текста с помощью алгоритма Хаффмана
    │   └── xor.py              # Логика шифрования и дешифрования с использованием XOR
    └── tasks/                   # Задачи для Celery (асинхронные операции)
        ├── __init__.py
        └── encode_tasks.py     # Задачи для кодирования и декодирования (с использованием Celery)
